Prod_G_Hippocampus_1_L + Prod_G_Hippocampus_1_R + Prod_G_Rolandic_Oper_1_L +
Prod_G_Occipital_Lat_1_R + Prod_G_Rolandic_Oper_1_R + Prod_G_Angular_2_R,
data = donnees)
MSE<-mse(donnees$Prod_G_Frontal_Inf_Tri_1_L, model$fitted.values)
MSE
}
{
donnees<-sample(donnees, replace=FALSE)
res<-lm(Prod_G_Frontal_Inf_Tri_1_L ~ Prod_G_Frontal_Inf_Tri_1_R +
Prod_S_Sup_Temporal_4_L + Prod_G_Angular_2_L + Index_Lateralisation_Hemispherique +
Prod_G_Hippocampus_1_L + Prod_G_Hippocampus_1_R + Prod_G_Rolandic_Oper_1_L +
Prod_G_Occipital_Lat_1_R + Prod_G_Rolandic_Oper_1_R + Prod_G_Angular_2_R,
data = donnees)
MSE<-mse(donnees$Prod_G_Frontal_Inf_Tri_1_L, model$fitted.values)
print(MSE)
}
for(i in 1:100)
{
donnees<-sample(donnees, replace=FALSE)
res<-lm(Prod_G_Frontal_Inf_Tri_1_L ~ Prod_G_Frontal_Inf_Tri_1_R +
Prod_S_Sup_Temporal_4_L + Prod_G_Angular_2_L + Index_Lateralisation_Hemispherique +
Prod_G_Hippocampus_1_L + Prod_G_Hippocampus_1_R + Prod_G_Rolandic_Oper_1_L +
Prod_G_Occipital_Lat_1_R + Prod_G_Rolandic_Oper_1_R + Prod_G_Angular_2_R,
data = donnees)
MSE<-mse(donnees$Prod_G_Frontal_Inf_Tri_1_L, model$fitted.values)
print(MSE)
}
for(i in 1:100)
{
donnees<-sample(donnees[,i], replace=FALSE)
res<-lm(Prod_G_Frontal_Inf_Tri_1_L ~ Prod_G_Frontal_Inf_Tri_1_R +
Prod_S_Sup_Temporal_4_L + Prod_G_Angular_2_L + Index_Lateralisation_Hemispherique +
Prod_G_Hippocampus_1_L + Prod_G_Hippocampus_1_R + Prod_G_Rolandic_Oper_1_L +
Prod_G_Occipital_Lat_1_R + Prod_G_Rolandic_Oper_1_R + Prod_G_Angular_2_R,
data = donnees)
MSE<-mse(donnees$Prod_G_Frontal_Inf_Tri_1_L, model$fitted.values)
print(MSE)
}
for(i in 1:100)
{
donnees<-sample(donnees$Prod_G_Frontal_Inf_Tri_1_R, size=i, replace=FALSE)
res<-lm(Prod_G_Frontal_Inf_Tri_1_L ~ Prod_G_Frontal_Inf_Tri_1_R +
Prod_S_Sup_Temporal_4_L + Prod_G_Angular_2_L + Index_Lateralisation_Hemispherique +
Prod_G_Hippocampus_1_L + Prod_G_Hippocampus_1_R + Prod_G_Rolandic_Oper_1_L +
Prod_G_Occipital_Lat_1_R + Prod_G_Rolandic_Oper_1_R + Prod_G_Angular_2_R,
data = donnees)
MSE<-mse(donnees$Prod_G_Frontal_Inf_Tri_1_L, model$fitted.values)
print(MSE)
}
#Lecture des données
donnees<-readRDS("./activation2020.Rdata")
for(i in 1:100)
{
donnees.permut<-sample(donnees[,7], size=i, replace=FALSE)
res<-lm(Prod_G_Frontal_Inf_Tri_1_L ~ Prod_G_Frontal_Inf_Tri_1_R +
Prod_S_Sup_Temporal_4_L + Prod_G_Angular_2_L + Index_Lateralisation_Hemispherique +
Prod_G_Hippocampus_1_L + Prod_G_Hippocampus_1_R + Prod_G_Rolandic_Oper_1_L +
Prod_G_Occipital_Lat_1_R + Prod_G_Rolandic_Oper_1_R + Prod_G_Angular_2_R,
data = donnees.permut)
MSE<-mse(donnees$Prod_G_Frontal_Inf_Tri_1_L, model$fitted.values)
print(MSE)
}
for(i in 1:100)
{
donnees.permut<-sample(donnees[,7], size=i, replace=FALSE)
donnees[,7]<-donnees.permut
res<-lm(Prod_G_Frontal_Inf_Tri_1_L ~ Prod_G_Frontal_Inf_Tri_1_R +
Prod_S_Sup_Temporal_4_L + Prod_G_Angular_2_L + Index_Lateralisation_Hemispherique +
Prod_G_Hippocampus_1_L + Prod_G_Hippocampus_1_R + Prod_G_Rolandic_Oper_1_L +
Prod_G_Occipital_Lat_1_R + Prod_G_Rolandic_Oper_1_R + Prod_G_Angular_2_R,
data = donnees.permut)
MSE<-mse(donnees$Prod_G_Frontal_Inf_Tri_1_L, model$fitted.values)
print(MSE)
}
for(i in 1:100)
{
donnees.permut<-sample(donnees[,7], size=i, replace=FALSE)
donnees[,7]<-donnees.permut
res<-lm(Prod_G_Frontal_Inf_Tri_1_L ~ Prod_G_Frontal_Inf_Tri_1_R +
Prod_S_Sup_Temporal_4_L + Prod_G_Angular_2_L + Index_Lateralisation_Hemispherique +
Prod_G_Hippocampus_1_L + Prod_G_Hippocampus_1_R + Prod_G_Rolandic_Oper_1_L +
Prod_G_Occipital_Lat_1_R + Prod_G_Rolandic_Oper_1_R + Prod_G_Angular_2_R,
data = donnees)
MSE<-mse(donnees$Prod_G_Frontal_Inf_Tri_1_L, model$fitted.values)
print(MSE)
}
donnees.permut<-sample(donnees[,7], replace=FALSE)
donnees[,7]<-donnees.permut
res<-lm(Prod_G_Frontal_Inf_Tri_1_L ~ Prod_G_Frontal_Inf_Tri_1_R +
Prod_S_Sup_Temporal_4_L + Prod_G_Angular_2_L + Index_Lateralisation_Hemispherique +
Prod_G_Hippocampus_1_L + Prod_G_Hippocampus_1_R + Prod_G_Rolandic_Oper_1_L +
Prod_G_Occipital_Lat_1_R + Prod_G_Rolandic_Oper_1_R + Prod_G_Angular_2_R,
data = donnees)
MSE<-mse(donnees$Prod_G_Frontal_Inf_Tri_1_L, model$fitted.values)
print(MSE)
{
donnees.permut<-sample(donnees[,7], replace=FALSE)
donnees[,7]<-donnees.permut
res<-lm(Prod_G_Frontal_Inf_Tri_1_L ~ Prod_G_Frontal_Inf_Tri_1_R +
Prod_S_Sup_Temporal_4_L + Prod_G_Angular_2_L + Index_Lateralisation_Hemispherique +
Prod_G_Hippocampus_1_L + Prod_G_Hippocampus_1_R + Prod_G_Rolandic_Oper_1_L +
Prod_G_Occipital_Lat_1_R + Prod_G_Rolandic_Oper_1_R + Prod_G_Angular_2_R,
data = donnees)
MSE<-mse(donnees$Prod_G_Frontal_Inf_Tri_1_L, model$fitted.values)
print(MSE)
}
for(i in 1:100)
{
donnees.permut<-sample(donnees[,7], replace=FALSE)
donnees[,7]<-donnees.permut
res<-lm(Prod_G_Frontal_Inf_Tri_1_L ~ Prod_G_Frontal_Inf_Tri_1_R +
Prod_S_Sup_Temporal_4_L + Prod_G_Angular_2_L + Index_Lateralisation_Hemispherique +
Prod_G_Hippocampus_1_L + Prod_G_Hippocampus_1_R + Prod_G_Rolandic_Oper_1_L +
Prod_G_Occipital_Lat_1_R + Prod_G_Rolandic_Oper_1_R + Prod_G_Angular_2_R,
data = donnees)
MSE<-mse(donnees$Prod_G_Frontal_Inf_Tri_1_L, model$fitted.values)
print(MSE)
}
for(i in 1:10)
{
for (j in 1:100)
{
donnees.permut<-sample(donnees[,i], replace=FALSE)
donnees[,i]<-donnees.permut
res<-lm(Prod_G_Frontal_Inf_Tri_1_L ~ Prod_G_Frontal_Inf_Tri_1_R +
Prod_S_Sup_Temporal_4_L + Prod_G_Angular_2_L + Index_Lateralisation_Hemispherique +
Prod_G_Hippocampus_1_L + Prod_G_Hippocampus_1_R + Prod_G_Rolandic_Oper_1_L +
Prod_G_Occipital_Lat_1_R + Prod_G_Rolandic_Oper_1_R + Prod_G_Angular_2_R,
data = donnees)
MSE<-mse(donnees$Prod_G_Frontal_Inf_Tri_1_L, model$fitted.values)
print(MSE)
}
}
for(i in 1:10)
{
for (j in 1:100)
{
donnees.permut<-sample(donnees[,i], size=j, replace=FALSE)
donnees[,i]<-donnees.permut
res<-lm(Prod_G_Frontal_Inf_Tri_1_L ~ Prod_G_Frontal_Inf_Tri_1_R +
Prod_S_Sup_Temporal_4_L + Prod_G_Angular_2_L + Index_Lateralisation_Hemispherique +
Prod_G_Hippocampus_1_L + Prod_G_Hippocampus_1_R + Prod_G_Rolandic_Oper_1_L +
Prod_G_Occipital_Lat_1_R + Prod_G_Rolandic_Oper_1_R + Prod_G_Angular_2_R,
data = donnees)
MSE<-mse(donnees$Prod_G_Frontal_Inf_Tri_1_L, model$fitted.values)
print(MSE)
}
}
# Modèle M1
###########
donnees.M1<-donnees[, c( "Prod_G_Frontal_Inf_Tri_1_R",
"Prod_S_Sup_Temporal_4_L","Prod_G_Angular_2_L", "Index_Lateralisation_Hemispherique",
"Prod_G_Hippocampus_1_L", "Prod_G_Hippocampus_1_R", "Prod_G_Rolandic_Oper_1_L",
"Prod_G_Occipital_Lat_1_R", "Prod_G_Rolandic_Oper_1_R", "Prod_G_Angular_2_R")]
for(i in 1:10)
{
for (j in 1:100)
{
donnees.M1.temp<-donnees.M1
donnees.permut<-sample(donnees.M1[,i], size=j, replace=FALSE)
donnees.M1.temp[,i]<-donnees.permut
res<-lm(Prod_G_Frontal_Inf_Tri_1_L ~ Prod_G_Frontal_Inf_Tri_1_R +
Prod_S_Sup_Temporal_4_L + Prod_G_Angular_2_L + Index_Lateralisation_Hemispherique +
Prod_G_Hippocampus_1_L + Prod_G_Hippocampus_1_R + Prod_G_Rolandic_Oper_1_L +
Prod_G_Occipital_Lat_1_R + Prod_G_Rolandic_Oper_1_R + Prod_G_Angular_2_R,
data = donnees.M1)
MSE<-mse(donnees$Prod_G_Frontal_Inf_Tri_1_L, model$fitted.values)
print(MSE)
}
}
for(i in 1:10)
{
for (j in 1:100)
{
donnees.M1.temp<-donnees.M1
donnees.permut<-sample(donnees.M1[,i], replace=FALSE)
donnees.M1.temp[,i]<-donnees.permut
res<-lm(Prod_G_Frontal_Inf_Tri_1_L ~ Prod_G_Frontal_Inf_Tri_1_R +
Prod_S_Sup_Temporal_4_L + Prod_G_Angular_2_L + Index_Lateralisation_Hemispherique +
Prod_G_Hippocampus_1_L + Prod_G_Hippocampus_1_R + Prod_G_Rolandic_Oper_1_L +
Prod_G_Occipital_Lat_1_R + Prod_G_Rolandic_Oper_1_R + Prod_G_Angular_2_R,
data = donnees.M1.temp)
MSE<-mse(donnees.M1.temp$Prod_G_Frontal_Inf_Tri_1_L, model$fitted.values)
print(MSE)
}
}
# Modèle M1
###########
donnees.M1<-donnees[, c( "Prod_G_Frontal_Inf_Tri_1_L", "Prod_G_Frontal_Inf_Tri_1_R",
"Prod_S_Sup_Temporal_4_L","Prod_G_Angular_2_L", "Index_Lateralisation_Hemispherique",
"Prod_G_Hippocampus_1_L", "Prod_G_Hippocampus_1_R", "Prod_G_Rolandic_Oper_1_L",
"Prod_G_Occipital_Lat_1_R", "Prod_G_Rolandic_Oper_1_R", "Prod_G_Angular_2_R")]
res1<-lm(Prod_G_Frontal_Inf_Tri_1_L ~ Prod_G_Frontal_Inf_Tri_1_R +
Prod_S_Sup_Temporal_4_L + Prod_G_Angular_2_L + Index_Lateralisation_Hemispherique +
Prod_G_Hippocampus_1_L + Prod_G_Hippocampus_1_R + Prod_G_Rolandic_Oper_1_L +
Prod_G_Occipital_Lat_1_R + Prod_G_Rolandic_Oper_1_R + Prod_G_Angular_2_R,
data = donnees)
MSE1<-mse(donnees$Prod_G_Frontal_Inf_Tri_1_L, model$fitted.values)
MSE1
for(i in 2:11)
{
for (j in 1:100)
{
donnees.M1.temp<-donnees.M1
donnees.permut<-sample(donnees.M1[,i], replace=FALSE)
donnees.M1.temp[,i]<-donnees.permut
res<-lm(Prod_G_Frontal_Inf_Tri_1_L ~ Prod_G_Frontal_Inf_Tri_1_R +
Prod_S_Sup_Temporal_4_L + Prod_G_Angular_2_L + Index_Lateralisation_Hemispherique +
Prod_G_Hippocampus_1_L + Prod_G_Hippocampus_1_R + Prod_G_Rolandic_Oper_1_L +
Prod_G_Occipital_Lat_1_R + Prod_G_Rolandic_Oper_1_R + Prod_G_Angular_2_R,
data = donnees.M1.temp)
MSE<-mse(donnees.M1.temp$Prod_G_Frontal_Inf_Tri_1_L, model$fitted.values)
print(MSE)
}
}
for(i in 2:11)
{
for (j in 1:100)
{
donnees.M1.temp<-donnees.M1
donnees.permut<-sample(donnees.M1[,i], n=j, replace=FALSE)
donnees.M1.temp[,i]<-donnees.permut
res<-lm(Prod_G_Frontal_Inf_Tri_1_L ~ Prod_G_Frontal_Inf_Tri_1_R +
Prod_S_Sup_Temporal_4_L + Prod_G_Angular_2_L + Index_Lateralisation_Hemispherique +
Prod_G_Hippocampus_1_L + Prod_G_Hippocampus_1_R + Prod_G_Rolandic_Oper_1_L +
Prod_G_Occipital_Lat_1_R + Prod_G_Rolandic_Oper_1_R + Prod_G_Angular_2_R,
data = donnees.M1.temp)
MSE<-mse(donnees.M1.temp$Prod_G_Frontal_Inf_Tri_1_L, model$fitted.values)
print(MSE)
}
}
for(i in 2:11)
{
for (j in 1:100)
{
donnees.M1.temp<-donnees.M1
donnees.permut<-sample(donnees.M1[,i], replace=FALSE)
donnees.M1.temp[,i]<-donnees.permut
res<-lm(Prod_G_Frontal_Inf_Tri_1_L ~ Prod_G_Frontal_Inf_Tri_1_R +
Prod_S_Sup_Temporal_4_L + Prod_G_Angular_2_L + Index_Lateralisation_Hemispherique +
Prod_G_Hippocampus_1_L + Prod_G_Hippocampus_1_R + Prod_G_Rolandic_Oper_1_L +
Prod_G_Occipital_Lat_1_R + Prod_G_Rolandic_Oper_1_R + Prod_G_Angular_2_R,
data = donnees.M1.temp)
MSE<-mse(donnees.M1.temp$Prod_G_Frontal_Inf_Tri_1_L, res$fitted.values)
print(MSE)
}
}
for(i in 2:11)
{
for (j in 1:100)
{
donnees.M1.temp<-donnees.M1
donnees.permut<-sample(donnees.M1[,i], replace=FALSE)
donnees.M1.temp[,i]<-donnees.permut
res<-lm(Prod_G_Frontal_Inf_Tri_1_L ~ Prod_G_Frontal_Inf_Tri_1_R +
Prod_S_Sup_Temporal_4_L + Prod_G_Angular_2_L + Index_Lateralisation_Hemispherique +
Prod_G_Hippocampus_1_L + Prod_G_Hippocampus_1_R + Prod_G_Rolandic_Oper_1_L +
Prod_G_Occipital_Lat_1_R + Prod_G_Rolandic_Oper_1_R + Prod_G_Angular_2_R,
data = donnees.M1.temp)
MSE[j]<-mse(donnees.M1.temp$Prod_G_Frontal_Inf_Tri_1_L, res$fitted.values)
print(MSE)
}
GigaMSE[i]=MSE
}
boxplot[GigaMSE]
# Modèles de permutation
########################
GigaMSE[]
# Modèles de permutation
########################
GigaMSE[0]=0
# Modèles de permutation
########################
GigaMSE[0]<-0
# Modèles de permutation
########################
GigaMSE<-[]
# Modèles de permutation
########################
GigaMSE<-0
for(i in 2:11)
{
for (j in 1:100)
{
donnees.M1.temp<-donnees.M1
donnees.permut<-sample(donnees.M1[,i], replace=FALSE)
donnees.M1.temp[,i]<-donnees.permut
res<-lm(Prod_G_Frontal_Inf_Tri_1_L ~ Prod_G_Frontal_Inf_Tri_1_R +
Prod_S_Sup_Temporal_4_L + Prod_G_Angular_2_L + Index_Lateralisation_Hemispherique +
Prod_G_Hippocampus_1_L + Prod_G_Hippocampus_1_R + Prod_G_Rolandic_Oper_1_L +
Prod_G_Occipital_Lat_1_R + Prod_G_Rolandic_Oper_1_R + Prod_G_Angular_2_R,
data = donnees.M1.temp)
MSE[j]<-mse(donnees.M1.temp$Prod_G_Frontal_Inf_Tri_1_L, res$fitted.values)
print(MSE)
}
GigaMSE[i]=MSE
}
boxplot[GigaMSE]
for(i in 2:11)
{
for (j in 1:100)
{
donnees.M1.temp<-donnees.M1
donnees.permut<-sample(donnees.M1[,i], replace=FALSE)
donnees.M1.temp[,i]<-donnees.permut
res<-lm(Prod_G_Frontal_Inf_Tri_1_L ~ Prod_G_Frontal_Inf_Tri_1_R +
Prod_S_Sup_Temporal_4_L + Prod_G_Angular_2_L + Index_Lateralisation_Hemispherique +
Prod_G_Hippocampus_1_L + Prod_G_Hippocampus_1_R + Prod_G_Rolandic_Oper_1_L +
Prod_G_Occipital_Lat_1_R + Prod_G_Rolandic_Oper_1_R + Prod_G_Angular_2_R,
data = donnees.M1.temp)
MSE[j]<-mse(donnees.M1.temp$Prod_G_Frontal_Inf_Tri_1_L, res$fitted.values)
print(MSE)
}
GigaMSE[i]<-MSE
}
boxplot[GigaMSE]
GigaMSE<-0
for(i in 2:11)
{
for (j in 1:100)
{
donnees.M1.temp<-donnees.M1
donnees.permut<-sample(donnees.M1[,i], replace=FALSE)
donnees.M1.temp[,i]<-donnees.permut
res<-lm(Prod_G_Frontal_Inf_Tri_1_L ~ Prod_G_Frontal_Inf_Tri_1_R +
Prod_S_Sup_Temporal_4_L + Prod_G_Angular_2_L + Index_Lateralisation_Hemispherique +
Prod_G_Hippocampus_1_L + Prod_G_Hippocampus_1_R + Prod_G_Rolandic_Oper_1_L +
Prod_G_Occipital_Lat_1_R + Prod_G_Rolandic_Oper_1_R + Prod_G_Angular_2_R,
data = donnees.M1.temp)
MSE[j]<-mse(donnees.M1.temp$Prod_G_Frontal_Inf_Tri_1_L, res$fitted.values)
print(MSE)
}
GigaMSE[i]<-data.frame(MSE)
}
boxplot[GigaMSE]
boxplot(GigaMSE)
boxplot(GigaMSE[,-c(1)])
boxplot(GigaMSE[,-1])
boxplot(GigaMSE[,c(2:11)])
boxplot(GigaMSE[c(2:11),])
boxplot(GigaMSE[c(2:11)])
boxplot(order(GigaMSE[c(2:11)]))
order(median(GigaMSE[c(2:11)]))
order(GigaMSE[c(2:11)])
mediane<-0
for(i in 2:11)
{
mediane[i]<-median(GigaMSE[i])
}
order.MSE<-order(mediane)
boxplot(GigaMSE[order.MSE])
order.MSE
mediane
mediane<-0
for(i in 2:11)
{
mediane[i]<-data.frame(median(GigaMSE[i]))
}
order.MSE<-order(mediane)
order.MSE
mediane
boxplot(GigaMSE[order.MSE])
mediane<-0
for(i in 2:11)
{
mediane[i]<-data.frame(median(GigaMSE[,i]))
}
order.MSE<-order(mediane)
order.MSE
mediane
boxplot(GigaMSE[order.MSE])
mediane<-0
for(i in 2:11)
{
mediane[i]<-data.frame(median(GigaMSE[i,]))
}
order.MSE<-order(mediane)
order.MSE
mediane
boxplot(GigaMSE[order.MSE])
class(GigaMSE[1])
class(GigaMSE[2])
GigaMSE[2]
GigaMSE[2,]
GigaMSE[,2]
median(GigaMSE[2])
GigaMSE[5]
GigaMSE[3]
median(GigaMSE[3])
median(c(GigaMSE[3])
)
median(c(GigaMSE[3][,])
)
median(c(GigaMSE[3][1,])
)
median(c(GigaMSE[3][1]))
median(GigaMSE[3][1])
mediane<-0
for(i in 2:11)
{
mediane[i]<-data.frame(mean(GigaMSE[i]))
}
order.MSE<-order(mediane)
order.MSE
mediane
boxplot(GigaMSE[order.MSE])
mediane<-0
for(i in 2:11)
{
mediane[i]<-data.frame(mean(GigaMSE$i))
}
order.MSE<-order(mediane)
order.MSE
mediane
boxplot(GigaMSE[order.MSE])
mediane<-0
for(i in 2:11)
{
mediane[i]<-data.frame(mean(GigaMSE$i))
}
order.MSE<-order(mediane)
order.MSE
mediane
boxplot(GigaMSE[order.MSE])
GigaMSE$3
GigaMSE
mediane<-0
for(i in 2:11)
{
mediane[i]<-data.frame(mean(GigaMSE[[i]]))
}
order.MSE<-order(mediane)
order.MS
mediane
boxplot(GigaMSE[order.MSE])
order.MSE<-order(mediane[])
order.MSE<-order(mediane[2:11])
order.MSE<-order(mediane(2:11)
order.MSE<-order(mediane(2:11))
order.MSE<-order(mediane(2:11))
order.MSE<-order(mediane[c(2:11)])
order.MSE<-order(mediane[[c(2:11)]])
order.MSE<-order(mediane[[2:11]])
order.MSE<-order(mediane[[1]])
mediane<-c()
for(i in 2:11)
{
mediane[i]<-median(GigaMSE[[i]])
}
order.MSE<-order(mediane)
order.MS
order.MSE
mediane
boxplot(GigaMSE[order.MSE])
GigaMSE<-GigaMSE[-1]
boxplot(GigaMSE[order.MSE])
# Modèles de permutation
########################
GigaMSE<-c()
for(i in 2:11)
{
for (j in 1:100)
{
donnees.M1.temp<-donnees.M1
donnees.permut<-sample(donnees.M1[,i], replace=FALSE)
donnees.M1.temp[,i]<-donnees.permut
res<-lm(Prod_G_Frontal_Inf_Tri_1_L ~ Prod_G_Frontal_Inf_Tri_1_R +
Prod_S_Sup_Temporal_4_L + Prod_G_Angular_2_L + Index_Lateralisation_Hemispherique +
Prod_G_Hippocampus_1_L + Prod_G_Hippocampus_1_R + Prod_G_Rolandic_Oper_1_L +
Prod_G_Occipital_Lat_1_R + Prod_G_Rolandic_Oper_1_R + Prod_G_Angular_2_R,
data = donnees.M1.temp)
MSE[j]<-mse(donnees.M1.temp$Prod_G_Frontal_Inf_Tri_1_L, res$fitted.values)
print(MSE)
}
GigaMSE[i]<-MSE
}
GigaMSE<-0
for(i in 2:11)
{
for (j in 1:100)
{
donnees.M1.temp<-donnees.M1
donnees.permut<-sample(donnees.M1[,i], replace=FALSE)
donnees.M1.temp[,i]<-donnees.permut
res<-lm(Prod_G_Frontal_Inf_Tri_1_L ~ Prod_G_Frontal_Inf_Tri_1_R +
Prod_S_Sup_Temporal_4_L + Prod_G_Angular_2_L + Index_Lateralisation_Hemispherique +
Prod_G_Hippocampus_1_L + Prod_G_Hippocampus_1_R + Prod_G_Rolandic_Oper_1_L +
Prod_G_Occipital_Lat_1_R + Prod_G_Rolandic_Oper_1_R + Prod_G_Angular_2_R,
data = donnees.M1.temp)
MSE[j]<-mse(donnees.M1.temp$Prod_G_Frontal_Inf_Tri_1_L, res$fitted.values)
print(MSE)
}
GigaMSE[i]<-data.frame(MSE)
}
GigaMSE<-GigaMSE[-1]
GigaMSE
mediane<-c()
for(i in 2:11)
{
mediane[i]<-median(GigaMSE[[i]])
}
mediane<-c()
for(i in 1:10)
{
mediane[i]<-median(GigaMSE[[i]])
}
order.MSE<-order(mediane)
order.MSE
boxplot(GigaMSE[order.MSE])
plot(GigaMSE[order.MSE])
plot(mediane)
plot(mediane[order.MSE])
